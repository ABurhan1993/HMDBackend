// <auto-generated />
using System;
using CrmBackend.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace CrmBackend.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250411210551_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("CrmBackend.Domain.Entities.Branch", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Branches");
                });

            modelBuilder.Entity("CrmBackend.Domain.Entities.Customer", b =>
                {
                    b.Property<int>("CustomerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("CustomerId"));

                    b.Property<int?>("BranchId")
                        .HasColumnType("integer");

                    b.Property<int>("ContactStatus")
                        .HasColumnType("integer");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedDate")
                        .HasColumnType("text");

                    b.Property<string>("CustomerAddress")
                        .HasColumnType("text");

                    b.Property<Guid?>("CustomerAssignedBy")
                        .HasColumnType("uuid");

                    b.Property<string>("CustomerAssignedDate")
                        .HasColumnType("text");

                    b.Property<Guid?>("CustomerAssignedTo")
                        .HasColumnType("uuid");

                    b.Property<string>("CustomerCity")
                        .HasColumnType("text");

                    b.Property<string>("CustomerContact")
                        .HasColumnType("text");

                    b.Property<string>("CustomerCountry")
                        .HasColumnType("text");

                    b.Property<string>("CustomerEmail")
                        .HasColumnType("text");

                    b.Property<string>("CustomerName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CustomerNationalId")
                        .HasColumnType("text");

                    b.Property<string>("CustomerNationality")
                        .HasColumnType("text");

                    b.Property<string>("CustomerNextMeetingDate")
                        .HasColumnType("text");

                    b.Property<string>("CustomerNotes")
                        .HasColumnType("text");

                    b.Property<int?>("CustomerTimeSpent")
                        .HasColumnType("integer");

                    b.Property<string>("CustomerWhatsapp")
                        .HasColumnType("text");

                    b.Property<Guid?>("EscalatedBy")
                        .HasColumnType("uuid");

                    b.Property<string>("EscalatedOn")
                        .HasColumnType("text");

                    b.Property<Guid?>("EscalationRequestedBy")
                        .HasColumnType("uuid");

                    b.Property<string>("EscalationRequestedOn")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool?>("IsEscalationRequested")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("IsReturnedBy")
                        .HasColumnType("uuid");

                    b.Property<bool?>("IsReturnedNotRespondingCustomer")
                        .HasColumnType("boolean");

                    b.Property<string>("IsReturnedNotRespondingCustomerDate")
                        .HasColumnType("text");

                    b.Property<bool?>("IsVisitedShowroom")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uuid");

                    b.Property<string>("UpdatedDate")
                        .HasColumnType("text");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid");

                    b.Property<int>("WayOfContact")
                        .HasColumnType("integer");

                    b.HasKey("CustomerId");

                    b.HasIndex("BranchId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("CustomerAssignedBy");

                    b.HasIndex("CustomerAssignedTo");

                    b.HasIndex("EscalatedBy");

                    b.HasIndex("EscalationRequestedBy");

                    b.HasIndex("IsReturnedBy");

                    b.HasIndex("UpdatedBy");

                    b.HasIndex("UserId");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("CrmBackend.Domain.Entities.CustomerBranch", b =>
                {
                    b.Property<int>("CustomerBranchId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("CustomerBranchId"));

                    b.Property<int>("BranchId")
                        .HasColumnType("integer");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedDate")
                        .HasColumnType("text");

                    b.Property<int>("CustomerId")
                        .HasColumnType("integer");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uuid");

                    b.Property<string>("UpdatedDate")
                        .HasColumnType("text");

                    b.HasKey("CustomerBranchId");

                    b.HasIndex("BranchId");

                    b.HasIndex("CustomerId");

                    b.ToTable("CustomerBranch");
                });

            modelBuilder.Entity("CrmBackend.Domain.Entities.CustomerComment", b =>
                {
                    b.Property<int>("CustomerCommentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("CustomerCommentId"));

                    b.Property<Guid>("CommentAddedBy")
                        .HasColumnType("uuid");

                    b.Property<string>("CommentAddedOn")
                        .HasColumnType("text");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("integer");

                    b.Property<string>("CreatedDate")
                        .HasColumnType("text");

                    b.Property<string>("CustomerCommentDetail")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("CustomerId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsActve")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uuid");

                    b.Property<string>("UpdatedDate")
                        .HasColumnType("text");

                    b.HasKey("CustomerCommentId");

                    b.HasIndex("CommentAddedBy");

                    b.HasIndex("CustomerId");

                    b.ToTable("CustomerComment");
                });

            modelBuilder.Entity("CrmBackend.Domain.Entities.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("CrmBackend.Domain.Entities.RoleClaim", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaims");
                });

            modelBuilder.Entity("CrmBackend.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("BranchId")
                        .HasColumnType("integer");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("BranchId");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("CrmBackend.Domain.Entities.Customer", b =>
                {
                    b.HasOne("CrmBackend.Domain.Entities.Branch", "Branch")
                        .WithMany("Customers")
                        .HasForeignKey("BranchId");

                    b.HasOne("CrmBackend.Domain.Entities.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CrmBackend.Domain.Entities.User", "CustomerAssignedByUser")
                        .WithMany()
                        .HasForeignKey("CustomerAssignedBy");

                    b.HasOne("CrmBackend.Domain.Entities.User", "CustomerAssignedToUser")
                        .WithMany()
                        .HasForeignKey("CustomerAssignedTo");

                    b.HasOne("CrmBackend.Domain.Entities.User", "EscalatedByUser")
                        .WithMany()
                        .HasForeignKey("EscalatedBy");

                    b.HasOne("CrmBackend.Domain.Entities.User", "EscalationRequestedByUser")
                        .WithMany()
                        .HasForeignKey("EscalationRequestedBy");

                    b.HasOne("CrmBackend.Domain.Entities.User", "IsReturnedByUser")
                        .WithMany()
                        .HasForeignKey("IsReturnedBy");

                    b.HasOne("CrmBackend.Domain.Entities.User", "UpdatedByUser")
                        .WithMany()
                        .HasForeignKey("UpdatedBy");

                    b.HasOne("CrmBackend.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("Branch");

                    b.Navigation("CreatedByUser");

                    b.Navigation("CustomerAssignedByUser");

                    b.Navigation("CustomerAssignedToUser");

                    b.Navigation("EscalatedByUser");

                    b.Navigation("EscalationRequestedByUser");

                    b.Navigation("IsReturnedByUser");

                    b.Navigation("UpdatedByUser");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CrmBackend.Domain.Entities.CustomerBranch", b =>
                {
                    b.HasOne("CrmBackend.Domain.Entities.Branch", "Branch")
                        .WithMany()
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CrmBackend.Domain.Entities.Customer", "Customer")
                        .WithMany("CustomerBranches")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Branch");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("CrmBackend.Domain.Entities.CustomerComment", b =>
                {
                    b.HasOne("CrmBackend.Domain.Entities.User", "CommentAddedByNavigation")
                        .WithMany()
                        .HasForeignKey("CommentAddedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CrmBackend.Domain.Entities.Customer", "Customer")
                        .WithMany("CustomerComments")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CommentAddedByNavigation");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("CrmBackend.Domain.Entities.RoleClaim", b =>
                {
                    b.HasOne("CrmBackend.Domain.Entities.Role", "Role")
                        .WithMany("RoleClaims")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("CrmBackend.Domain.Entities.User", b =>
                {
                    b.HasOne("CrmBackend.Domain.Entities.Branch", "Branch")
                        .WithMany("Users")
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CrmBackend.Domain.Entities.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Branch");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("CrmBackend.Domain.Entities.Branch", b =>
                {
                    b.Navigation("Customers");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("CrmBackend.Domain.Entities.Customer", b =>
                {
                    b.Navigation("CustomerBranches");

                    b.Navigation("CustomerComments");
                });

            modelBuilder.Entity("CrmBackend.Domain.Entities.Role", b =>
                {
                    b.Navigation("RoleClaims");

                    b.Navigation("Users");
                });
#pragma warning restore 612, 618
        }
    }
}
